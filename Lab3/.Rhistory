difftime(05-30, 04-20)
#function to calculate kernel-value for distance between our observation and another observation
KernelDistance <- function (testLoc, stationLoc) {
kernelvalue = exp(-(distHaversine(testLoc, stationLoc)/h_distance)^2)
return (kernelvalue)
#distHaversine - The shortest distance between two points (i.e., the 'great-circle-distance' or 'as the crow flies')
#takes input as: c(longitude, langitude)
}
#function to calculate kernel-value for days between our observation and another observation
KernelDays <- function(testDate, stationDate) {
#calculate the difference in days between the 2 dates.
#Since we filtered away dates after our testDate, this difference will always be >=.
#daysapart = as.numeric(difftime(testDate, stationDate))
#daysapart == daysapart%%365.25
#extract year
year = substring(testDate,1,4)
#extract month + date
monthday = substring(stationDate,5,11)
#does not take into factor skottår, if 29 feb set date to 28 feb
if (monthday == "-02-29") {
monthday = "-02-28"
}
#recombine the year and month+day
combined = as.Date(paste(year,monthday,sep=""))
#use difftime again to calculate difference between the two dates.
daysdist = as.numeric(difftime(testDate, combined))
daysdist = abs(daysdist)
#since the maximum difference between two dates should be 365/2 and not 365
#thus if distance > 365/2, subtract this distance from 365.
if (daysdist > floor(365/2)) {
daysdist = floor(365 - daysdist)
}
#denna tar hänsyn till skottår, får ej error om tex 02-29
#print(daysdist)
#daysdist = as.numeric(difftime(testDate, stationDate))
#daysdist = daysdist%%365.25
#print(daysdist)
#if (daysdist > floor(365.25/2)) {
#  daysdist = round(365.25 - daysdist)
# }
#print(daysdist)
kernelvalue = exp(-(daysdist/h_date)^2)
return (kernelvalue)
}
#Creating new kernel by summing the three above kernels together
KernelSum = function (testLoc, testDate, testTime, stationLoc, stationDate, stationTime) {
kernelvalue = KernelDistance(testLoc, stationLoc) + KernelDays(testDate, stationDate) + KernelTime(testTime, stationTime)
return (kernelvalue)
}
KernelSum(testLoc, testDate, testTimes[1], stationCords, stationDate, stationTime)
set.seed(1234567890)
library(geosphere)
stations = read.csv("stations.csv")
temps = read.csv("temps50k.csv")
st = merge(stations,temps,by="station_number")
a = 17.9513 #longitude
b = 59.3537 #latitude
testLoc = c(longitude = a, latitute = b)
#The date to predict
testDate = as.Date("2000-10-23")
#Real time and temperature for above coordinates and date:00.00, 2.7 degrees
#delete all data after our observation
#convert our dates into Date objects
st$date = as.Date(st$date, format = "%Y-%m-%d")
#difftime - calculates a difference of two date/time objects
#To delete data after our observation: if difftime of our date and the ones in our data is smaller or equal to 0 (
#i.e. our data is "larger", i.e. after the other date), then we keep that observation.
stFiltered = subset(st, difftime(testDate, st$date) >= 0);
#stFiltered = st[which(difftime(testDate, st$date) >= 0),]
#The times we want to predict temperature for
testTimes = c("04:00:00", "06:00:00","08:00:00","10:00:00", "12:00:00","14:00:00","16:00:00", "18:00:00","20:00:00",
"22:00:00", "24:00:00")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
h_distance = 50000 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0 , to = 300000 , by = 1000)
dist_km = seq(from = 0, to = 300, by = 1)
plot(dist_km, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
#Kernel 2 - Distance between days a temperature measurement was made and the day of interest.
h_date = 15 #using smoothing factor 15 for this makes distances > 30 days have almost 0 impact
days = seq(from = 0, to = floor(365/2), by = 1)
kernelDays = exp(-(days/h_date)^2)
plot(days, kernelDays, type='l', xlab="difference in days", ylab="kernel-value")
#Kernel 3 - Distance between the hour of the day a temperature measurement was made and the hour of interest.
h_time = 3 #using smoothing factor 3 for this makes distances > 5 hours have almost 0 impact,
hours = seq(from = 0, to = 12, by = 1)
kernelHours = exp(-(hours/h_time)^2)
plot(hours, kernelHours, type='l', xlab="difference in hours", ylab="kernel-value")
#########Combine the three kernels into a new kernel by summing them and then make predictions##########
#function to calculate kernel-value for distance between our observation and another observation
KernelDistance = function (testLoc, stationLoc) {
kernelvalue = exp(-(distHaversine(testLoc, stationLoc)/h_distance)^2)
return (kernelvalue)
#distHaversine - The shortest distance between two points (i.e., the 'great-circle-distance' or 'as the crow flies')
#takes input as: c(longitude, langitude)
}
#function to calculate kernel-value for days between our observation and another observation
KernelDays = function(testDate, stationDate) {
#calculate the difference in days between the 2 dates.
#Since we filtered away dates after our testDate, this difference will always be >=.
#daysapart = as.numeric(difftime(testDate, stationDate))
#daysapart == daysapart%%365.25
#extract year
year = substring(testDate,1,4)
#extract month + date
monthday = substring(stationDate,5,11)
#does not take into factor skottår, if 29 feb set date to 28 feb
if (monthday == "-02-29") {
monthday = "-02-28"
}
#recombine the year and month+day
combined = as.Date(paste(year,monthday,sep=""))
#use difftime again to calculate difference between the two dates.
daysdist = as.numeric(difftime(testDate, combined))
daysdist = abs(daysdist)
#since the maximum difference between two dates should be 365/2 and not 365
#thus if distance > 365/2, subtract this distance from 365.
if (daysdist > floor(365/2)) {
daysdist = floor(365 - daysdist)
}
#denna tar hänsyn till skottår, får ej error om tex 02-29
#print(daysdist)
#daysdist = as.numeric(difftime(testDate, stationDate))
#daysdist = daysdist%%365.25
#print(daysdist)
#if (daysdist > floor(365.25/2)) {
#  daysdist = round(365.25 - daysdist)
# }
#print(daysdist)
kernelvalue = exp(-(daysdist/h_date)^2)
return (kernelvalue)
}
#function to calculate kernel-value for hours between our observation and another observation
KernelTime = function(testTime, stationTime) {
testTime = strptime(testTime, format="%H:%M:%S")
stationTime = strptime(stationTime, format="%H:%M:%S")
timediff = difftime(testTime, stationTime)
timediff = abs(as.numeric(timediff))
if (timediff > 12) {
timediff = 24 - timediff
}
kernelvalue = exp(-(timediff/h_time)^2)
return (kernelvalue)
}
#Creating new kernel by summing the three above kernels together
KernelSum = function (testLoc, testDate, testTime, stationLoc, stationDate, stationTime) {
kernelvalue = KernelDistance(testLoc, stationLoc) + KernelDays(testDate, stationDate) + KernelTime(testTime, stationTime)
return (kernelvalue)
}
#giving us kernelvalue of 2 different locations, 2 different dates, 2 different times
#all the points in st will contribute, but with different weight (kernelvalue)
#see equation on slides. sum of all kernels temp * kernelvalue /sum of all kernel values
KernelSum(testLoc, testDate, testTimes[1], stationCords, stationDate, stationTime)
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3assignment1.R", echo=TRUE)
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3assignment1.R", echo=TRUE)
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3assignment1.R", echo=TRUE)
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3assignment1.R", echo=TRUE)
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3assignment1.R", echo=TRUE)
l_distance = 35000 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0 , to = 300000 , by = 1000)
kernelDist = seq(from = 0, to = 300, by = 1)
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp(-(distances/h_distance)^2)
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 35000 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp(-distances^2/(2*l_distance)^2)
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 35000 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp(-distances^2/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 35000 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
#i.e. our data is "larger", i.e. after the other date), then we keep that observation.
stFiltered = subset(st, difftime(testDate, st$date) >= 0);
#stFiltered = st[which(difftime(testDate, st$date) >= 0),]
#The times we want to predict temperature for
testTimes = c("04:00:00", "06:00:00","08:00:00","10:00:00", "12:00:00","14:00:00","16:00:00", "18:00:00","20:00:00",
"22:00:00", "24:00:00")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 35000 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
set.seed(1234567890)
library(geosphere)
stations = read.csv("stations.csv")
temps = read.csv("temps50k.csv")
st = merge(stations,temps,by="station_number")
a = 17.9513 #longitude
b = 59.3537 #latitude
testLoc = c(longitude = a, latitute = b)
#The date to predict
testDate = as.Date("2000-10-23")
#Real time and temperature for above coordinates and date:00.00, 2.7 degrees
#delete all data after our observation
#convert our dates into Date objects
st$date = as.Date(st$date, format = "%Y-%m-%d")
#difftime - calculates a difference of two date/time objects
#To delete data after our observation: if difftime of our date and the ones in our data is smaller or equal to 0 (
#i.e. our data is "larger", i.e. after the other date), then we keep that observation.
stFiltered = subset(st, difftime(testDate, st$date) >= 0);
#stFiltered = st[which(difftime(testDate, st$date) >= 0),]
#The times we want to predict temperature for
testTimes = c("04:00:00", "06:00:00","08:00:00","10:00:00", "12:00:00","14:00:00","16:00:00", "18:00:00","20:00:00",
"22:00:00", "24:00:00")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 35000 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
days = seq(from = 0, to = floor(365/2), by = 1)
kernelDays = exp(-(days/h_date)^2)
plot(days, kernelDays, type='l', xlab="difference in days", ylab="kernel-value")
"22:00:00", "24:00:00")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 50000 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 5 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
"22:00:00", "24:00:00")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 50000 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
#The times we want to predict temperature for
testTimes = c("04:00:00", "06:00:00","08:00:00","10:00:00", "12:00:00","14:00:00","16:00:00", "18:00:00","20:00:00",
"22:00:00", "24:00:00")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 500 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 5 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
#The times we want to predict temperature for
testTimes = c("04:00:00", "06:00:00","08:00:00","10:00:00", "12:00:00","14:00:00","16:00:00", "18:00:00","20:00:00",
"22:00:00", "24:00:00")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 5 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
#Kernel 2 - Distance between days a temperature measurement was made and the day of in
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 5000 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 5000 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 5 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 10 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 100 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
"22:00:00", "24:00:00")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 50 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
"22:00:00", "24:00:00")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 30 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 25 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-||(x*-xi)/h)||^2), which is the same as exp(-||x*-x'||^2/(2l^2))
#Kernel 1 - Physical distance from a station to the point of interest
l_distance = 30 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp((-distances^2)/(2*l_distance^2))
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
#Kernel 2 - Distance between days a temperature measurement was made and the day of interest.
l_date = 10 #using smoothing factor 15 for this makes distances > 30 days have almost 0 impact
days = seq(from = 0, to = floor(365/2), by = 1)
kernelDays = exp((-(days^2)/(2*l_date)^2))
plot(days, kernelDays, type='l', xlab="difference in days", ylab="kernel-value")
#Kernel 2 - Distance between days a temperature measurement was made and the day of interest.
l_date = 10 #using smoothing factor 15 for this makes distances > 30 days have almost 0 impact
days = seq(from = 0, to = floor(365/2), by = 1)
kernelDays = exp((-(days^2)/(2*l_date)^2))
plot(days, kernelDays, type='l', xlab="difference in days", ylab="kernel-value")
#Kernel 2 - Distance between days a temperature measurement was made and the day of interest.
l_date = 7 #using smoothing factor 15 for this makes distances > 30 days have almost 0 impact
days = seq(from = 0, to = floor(365/2), by = 1)
kernelDays = exp((-(days^2)/(2*l_date)^2))
plot(days, kernelDays, type='l', xlab="difference in days", ylab="kernel-value")
#Kernel 3 - Distance between the hour of the day a temperature measurement was made and the hour of interest.
l_time = 2 #using smoothing factor 3 for this makes distances > 5 hours have almost 0 impact,
hours = seq(from = 0, to = 12, by = 1)
kernelHours = exp((-(hours^2)/(2*l_time)^2))
plot(hours, kernelHours, type='l', xlab="difference in hours", ylab="kernel-value")
#Kernel 3 - Distance between the hour of the day a temperature measurement was made and the hour of interest.
l_time = 1 #using smoothing factor 3 for this makes distances > 5 hours have almost 0 impact,
hours = seq(from = 0, to = 12, by = 1)
kernelHours = exp((-(hours^2)/(2*l_time)^2))
plot(hours, kernelHours, type='l', xlab="difference in hours", ylab="kernel-value")
#Kernel 3 - Distance between the hour of the day a temperature measurement was made and the hour of interest.
l_time = 1.3 #using smoothing factor 3 for this makes distances > 5 hours have almost 0 impact,
hours = seq(from = 0, to = 12, by = 1)
kernelHours = exp((-(hours^2)/(2*l_time)^2))
plot(hours, kernelHours, type='l', xlab="difference in hours", ylab="kernel-value")
#Kernel 3 - Distance between the hour of the day a temperature measurement was made and the hour of interest.
l_time = 1.2 #using smoothing factor 3 for this makes distances > 5 hours have almost 0 impact,
hours = seq(from = 0, to = 12, by = 1)
kernelHours = exp((-(hours^2)/(2*l_time)^2))
plot(hours, kernelHours, type='l', xlab="difference in hours", ylab="kernel-value")
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3assignment1.R", echo=TRUE)
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3assignment1.R", echo=TRUE)
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3assignment1.R", echo=TRUE)
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3assignment1.R", echo=TRUE)
?periodicDiff
??periodicDiff
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3assignment1.R", echo=TRUE)
?glm
?glm
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3kernel.R", echo=TRUE)
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3kernel.R", echo=TRUE)
View(st)
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3kernel.R", echo=TRUE)
View(stFiltered)
set.seed(1234567890)
library(geosphere)
stations = read.csv("stations.csv")
temps = read.csv("temps50k.csv")
st = merge(stations,temps,by="station_number")
a = 17.9513 #longitude
b = 59.3537 #latitude
testLoc = c(longitude = a, latitute = b)
#The date to predict
testDate = as.Date("2016-07-01")
#Real time and temperature for above coordinates and date:00.00, 2.7 degrees
#delete all data after our observation
#convert our dates into Date objects
st$date = as.Date(st$date, format = "%Y-%m-%d")
#difftime - calculates a difference of two date/time objects
#To delete data after our observation: if difftime of our date and the ones in our data is smaller or equal to 0 (
#i.e. our data is "larger", i.e. after the other date), then we keep that observation.
stFiltered = subset(st, difftime(testDate, st$date) >= 0);
#stFiltered = st[which(difftime(testDate, st$date) >= 0),]
#The times we want to predict temperature for
testTimes = c("04:00:00", "06:00:00","08:00:00","10:00:00", "12:00:00","14:00:00","16:00:00", "18:00:00","20:00:00",
"22:00:00", "24:00:00")
testLoc = c(longitude = a, latitute = b)
#The date to predict
testDate = as.Date("2006-07-01")
#Real time and temperature for above coordinates and date:00.00, 2.7 degrees
#delete all data after our observation
#convert our dates into Date objects
st$date = as.Date(st$date, format = "%Y-%m-%d")
#difftime - calculates a difference of two date/time objects
#To delete data after our observation: if difftime of our date and the ones in our data is smaller or equal to 0 (
#i.e. our data is "larger", i.e. after the other date), then we keep that observation.
stFiltered = subset(st, difftime(testDate, st$date) >= 0);
#stFiltered = st[which(difftime(testDate, st$date) >= 0),]
#The times we want to predict temperature for
testTimes = c("04:00:00", "06:00:00","08:00:00","10:00:00", "12:00:00","14:00:00","16:00:00", "18:00:00","20:00:00",
"22:00:00", "24:00:00")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-(||(x*-xi)||/h)^2), which is the same as exp(-||x*-x'||^2/(2l^2)),
#where a certain h would correspond to a certain l.
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3kernel.R", echo=TRUE)
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3kernel.R", echo=TRUE)
h_distance = 50000 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp(-(distances/h_distance)^2)
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
set.seed(1234567890)
library(geosphere)
stations = read.csv("stations.csv")
temps = read.csv("temps50k.csv")
st = merge(stations,temps,by="station_number")
a = 17.9513 #longitude
b = 59.3537 #latitude
testLoc = c(longitude = a, latitute = b)
#The date to predict
testDate = as.Date("2000-10-23")
#Real time and temperature for above coordinates and date:00.00, 2.7 degrees
#delete all data after our observation
#convert our dates into Date objects
st$date = as.Date(st$date, format = "%Y-%m-%d")
#difftime - calculates a difference of two date/time objects
#To delete data after our observation: if difftime of our date and the ones in our data is smaller or equal to 0 (
#i.e. our data is "larger", i.e. after the other date), then we keep that observation.
stFiltered = subset(st, difftime(testDate, st$date) >= 0);
#stFiltered = st[which(difftime(testDate, st$date) >= 0),]
#The times we want to predict temperature for
testTimes = c("04:00:00", "06:00:00","08:00:00","10:00:00", "12:00:00","14:00:00","16:00:00", "18:00:00","20:00:00",
"22:00:00", "24:00:00")
########### - Selecting smoothing coefficients##########
#The larger the h, the more impact observations far away from our observation have
#Gaussian kernel:  exp(-(||(x*-xi)||/h)^2), which is the same as exp(-||x*-x'||^2/(2l^2)),
#where a certain h would correspond to a certain l.
#Kernel 1 - Physical distance from a station to the point of interest
h_distance = 50000 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp(-(distances/h_distance)^2)
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
distances = seq(from = 0 , to = 300000 , by = 1000)
kernelDist = exp(-(distances/h_distance)^2)
plot(distances, kernelDist, type='l')
distances = seq(from = 0 , to = 300 , by = 1)
kernelDist = exp(-(distances/h_distance)^2)
plot(distances, kernelDist, type='l')
#Kernel 1 - Physical distance from a station to the point of interest
h_distance = 50000 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0 , to = 300000 , by = 1000)
kernelDist = exp(-(distances/h_distance)^2)
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
h_distance = 50000 #using smoothing factor 50000 makes distances > 100 km have almost 0 impact
distances = seq(from = 0, to = 300, by = 1)
kernelDist = exp(-(distances/h_distance)^2)
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
distances = seq(from = 0 , to = 300000 , by = 1000)
kernelDist = exp(-(distances/h_distance)^2)
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
distances = seq(from = 0 , to = 300000 , by = 1000)
kernelDist = exp(-(distances/h_distance)^2)
plot(distances, kernelDist, type='l', xlab="distance in km", ylab="kernel-value")
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3kernel.R", echo=TRUE)
source("E:/kod/TDDE01/TDDE01-Machine-Learning/Lab3/lab3kernel.R", echo=TRUE)
